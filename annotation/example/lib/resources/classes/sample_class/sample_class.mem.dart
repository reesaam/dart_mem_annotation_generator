// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'sample_class.dart';

// **************************************************************************
// Generator: AnnotationBuilder
// **************************************************************************

/// 

///   This File is Generated by Mem Generator
///   [Sample] Annotated with [Mem] with [all] mode
///   Including:
///     Model Class, Entity Class and Mapper Class,
///     Model Classes includes [toJson] and [fromJson] functions, and Entity Classes are not!
///     Mappers will convert every filed in the class including [SubClasses], they should be annotated as well.
///     [Mem] Annotation will generate all these fields for all Classes, so all subclasses should decorated with annotation to generate model, entity and mapper to use them here
///     [Enums] also supported and they will be detected and count into account for mappers and also json conversion



///   Details:
///     Class: Sample
///     Constructors Count: 1
///     Variables Count: 7



///   ==> Model Class:
/// Sample
/// (Instance of 'Variable', Instance of 'Variable', Instance of 'Variable', ..., Instance of 'Variable', Instance of 'Variable')
/// null
/// null
/// null
/// null


class SampleModel  {
SampleModel({ this.sampleEnum, this.name, this.description, this.innerClassModel, this.sampleList, this.innerSampleListModel, this.innerSampleNestedListModel,});


/// type: SampleEnum?
/// isList: false
/// typeString: SampleEnum?
/// isCoreType: true
/// 
SampleEnum? sampleEnum;

/// type: String?
/// isList: false
/// typeString: String?
/// isCoreType: true
/// 
String? name;

/// type: String?
/// isList: false
/// typeString: String?
/// isCoreType: true
/// 
String? description;

/// type: InnerSample?
/// isList: false
/// typeString: InnerSample?
/// isCoreType: false
/// 
InnerSampleModel? innerClassModel;

/// type: List<String>?
/// isList: true
/// typeString: List<String>?
/// isCoreType: true
/// 
List<String>? sampleList;

/// type: List<InnerSample>?
/// isList: true
/// typeString: List<InnerSample>?
/// isCoreType: false
/// 
List<InnerSample>? innerSampleListModel;

/// type: List<List<List<InnerSample>>>?
/// isList: true
/// typeString: List<List<List<InnerSample>>>?
/// isCoreType: false
/// 
List<List<List<InnerSample>>>? innerSampleNestedListModel;



Map<String, dynamic> toJson() {
final map = <String, dynamic>{};
map['sampleEnum'] = sampleEnum?.name;
map['name'] = name;
map['description'] = description;
map['innerClassModel'] = innerClassModel?.toJson();
map['sampleList'] = sampleList.map((e) => e.toJson()).toList();
map['innerSampleListModel'] = innerSampleListModel?.toJson();
map['innerSampleNestedListModel'] = innerSampleNestedListModel?.toJson();
return map;}

SampleModel.fromJson(dynamic json) {
sampleEnum = SampleEnum.values.firstWhere((e) => e.name == json['sampleEnum']);
name = json[name];
description = json[description];
innerClassModel = InnerSampleModel.fromJson(json['innerClassModel']);
sampleList = (json[sampleList] as List).cast<List<String>?>();
innerSampleListModel = List<InnerSample>Model.fromJson(json['innerSampleListModel']);
innerSampleNestedListModel = List<List<List<InnerSample>>>Model.fromJson(json['innerSampleNestedListModel']);
}}
///   ==> Entity Class:


class SampleEntity  {
SampleEntity({ this.sampleEnum, this.name, this.description, this.innerClassEntity, this.sampleList, this.innerSampleListEntity, this.innerSampleNestedListEntity,});


/// type: SampleEnum?
/// isList: false
/// typeString: SampleEnum?
/// isCoreType: true
/// 
SampleEnum? sampleEnum;

/// type: String?
/// isList: false
/// typeString: String?
/// isCoreType: true
/// 
String? name;

/// type: String?
/// isList: false
/// typeString: String?
/// isCoreType: true
/// 
String? description;

/// type: InnerSample?
/// isList: false
/// typeString: InnerSample?
/// isCoreType: false
/// 
InnerSampleEntity? innerClassEntity;

/// type: List<String>?
/// isList: true
/// typeString: List<String>?
/// isCoreType: true
/// 
List<String>? sampleList;

/// type: List<InnerSample>?
/// isList: true
/// typeString: List<InnerSample>?
/// isCoreType: false
/// 
List<InnerSample>? innerSampleListEntity;

/// type: List<List<List<InnerSample>>>?
/// isList: true
/// typeString: List<List<List<InnerSample>>>?
/// isCoreType: false
/// 
List<List<List<InnerSample>>>? innerSampleNestedListEntity;

}
///   ==> Mapper Classes:
///   ==> Entity to Model Conversion Extension
extension ExtensionOnSampleEntity on SampleEntity {SampleModel get mapper => SampleModel(sampleEnum: sampleEnum,
name: name,
description: description,
innerClassModel: innerClassEntity?.mapper,
sampleListModel: sampleListEntity?.mapper,
innerSampleListModel: innerSampleListEntity?.mapper,
innerSampleNestedListModel: innerSampleNestedListEntity?.mapper,
);}

///   ==> Model to Entity Conversion Extension
extension ExtensionOnSampleModel on SampleModel {SampleEntity get mapper => SampleEntity(sampleEnum: sampleEnum,
name: name,
description: description,
innerClassEntity: innerClassModel?.mapper,
sampleListEntity: sampleListModel?.mapper,
innerSampleListEntity: innerSampleListModel?.mapper,
innerSampleNestedListEntity: innerSampleNestedListModel?.mapper,
);}
