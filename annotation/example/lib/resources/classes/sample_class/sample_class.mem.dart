// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'sample_class.dart';

// **************************************************************************
// Generator: AnnotationBuilder
// **************************************************************************

///   This File is Generated by Dart Mem Annotation Generator
///   [Sample] Annotated with [Mem] with [all] mode
///   Including:
///     Model Class, Entity Class and Mapper Class,
///     Model Classes includes [toJson] and [fromJson] functions, and Entity Classes are not!
///     Mappers will convert every filed in the class including [SubClasses], they should be annotated as well.
///     [Mem] Annotation will generate all these fields for all Classes, so all subclasses should decorated with annotation to generate model, entity and mapper to use them here
///     [Enums] also supported and they will be detected and count into account for mappers and also json conversion

///   Details:
///     Class: Sample
///     Constructors Count: 1
///     Variables Count: 6

///   ==> Model Class:
class SampleModel {
  SampleModel({
    this.sampleEnum,
    this.name,
    this.description,
    this.innerClassModel,
    this.sampleList,
    this.innerSampleListModel,
  });

  SampleEnum? sampleEnum;
  String? name;
  String? description;
  InnerSampleModel? innerClassModel;
  List<String>? sampleList;
  List<InnerSampleModel>? innerSampleListModel;

  Map<String, dynamic> toJson() {
    final map = <String, dynamic>{};
    map['sampleEnum'] = sampleEnum?.name;
    map['name'] = name;
    map['description'] = description;
    map['innerClassModel'] = innerClassModel?.toJson();
    map['sampleList'] = sampleList;
    map['innerSampleListModel'] =
        innerSampleListModel?.map((e) => e.toJson()).toList();
    return map;
  }

  SampleModel.fromJson(dynamic json) {
    sampleEnum =
        SampleEnum.values.firstWhere((e) => e.name == json['sampleEnum']);
    name = json[name];
    description = json[description];
    innerClassModel = InnerSampleModel.fromJson(json['innerClassModel']);
    sampleList = json[sampleList];
    innerSampleListModel = (json[innerSampleListModel] as List)
        .map((e) => InnerSampleModel.fromJson(e))
        .toList();
  }
}

///   ==> Entity Class:
class SampleEntity {
  SampleEntity({
    this.sampleEnum,
    this.name,
    this.description,
    this.innerClassEntity,
    this.sampleList,
    this.innerSampleListEntity,
  });

  SampleEnum? sampleEnum;
  String? name;
  String? description;
  InnerSampleEntity? innerClassEntity;
  List<String>? sampleList;
  List<InnerSampleEntity>? innerSampleListEntity;
}

///   ==> Mapper Classes:
///   ==> Entity to Model Mapper Extension
extension MapperExtensionOnSampleEntity on SampleEntity {
  SampleModel get mapper => SampleModel(
        sampleEnum: sampleEnum,
        name: name,
        description: description,
        innerClassModel: innerClassEntity?.mapper,
        sampleList: sampleList,
        innerSampleListModel:
            innerSampleListEntity?.map((e) => e.mapper).toList(),
      );
}

///   ==> Model to Entity Mapper Extension
extension MapperExtensionOnSampleModel on SampleModel {
  SampleEntity get mapper => SampleEntity(
        sampleEnum: sampleEnum,
        name: name,
        description: description,
        innerClassEntity: innerClassModel?.mapper,
        sampleList: sampleList,
        innerSampleListEntity:
            innerSampleListModel?.map((e) => e.mapper).toList(),
      );
}
